(* Simple IML example with functions, axiom, and theorem *)
[@@@import "./code-logician-examples/six_swiss.iml"]
(* [@@@import Six_swiss, "./code-logician-examples/six_swiss.iml"] *)

let add_one (x: int) : int = x + 1
[@@decomp top ()]

let double (x: int) : int = x * 2

let square : int -> int = ()
[@@opaque]

let cube : int -> int = ()
[@@opaque]

axiom positive_addition x =
  x >= 0 ==> add_one x > x

theorem double_add_one x =
  double (add_one x) = add_one (add_one x) + x
[@@by auto]

verify (fun x -> x > 0 ==> double x > x)

let double_non_negative_is_increasing (x: int) = x >= 0 ==> double x > x

verify double_non_negative_is_increasing

instance (fun x -> x >= 0 ==> not (double x > x))


let two_x = (let x = 1 in double x)

eval (double 2)
