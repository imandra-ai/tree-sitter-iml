(* Boyer-Green-Moore car controller, verified in ImandraX *)
(* G.Passmore, Imandra *)

type state = {
  w : int; (* current wind speed *)
  y : int; (* y-position of the vehicle *)
  v : int; (* accumulated velocity *)
}

let controller sgn_y sgn_old_y =
  (-3 * sgn_y) + (2 * sgn_old_y)

let sgn x =
  if x < 0 then -1
  else if x = 0 then 0
  else 1

let next_state dw s =
  { w = s.w + dw;
    y = s.y + s.v + s.w + dw;
    v = s.v +
        controller
          (sgn (s.y + s.v + s.w + dw))
          (sgn s.y)
  }

let arbitrary_delta_ws = List.for_all (fun x -> x = -1 || x = 0 || x = 1)

let rec final_state s dws =
  match dws with
  | [] -> s
  | dw :: dws' ->
    let s' = next_state dw s in
    final_state s' dws'
[@@adm dws]

let good_state s =
  match s.y, s.w + s.v with
  | -3, 1 -> true
  | -2, 1 -> true
  | -2, 2 -> true
  | -1, 2 -> true
  | -1, 3 -> true
  | 0, -1 -> true
  | 0, 0  -> true
  | 0, 1  -> true
  | 1, -2 -> true
  | 1, -3 -> true
  | 2, -1 -> true
  | 2, -2 -> true
  | 3, -1 -> true
  | _ -> false

theorem safety_1 s dw =
  good_state s
  && (dw = -1 || dw = 0 || dw = 1)
 ==>
  good_state (next_state dw s)
[@@rw]

(* Needs disabled functions to be disabled! *)

lemma all_good s dws =
  good_state s && arbitrary_delta_ws dws
  ==>
  good_state ((final_state s dws))
[@@by induction ~id:[%id final_state] ()
   @>>| auto] 
[@@disable next_state, good_state]
