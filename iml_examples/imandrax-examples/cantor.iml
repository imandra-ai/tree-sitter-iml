(* A proof that Cantor's Pairing Function gives a bijection from N x N to N in ImandraX.
   G.Passmore, Imandra
 *)

let rec sum n =
  if n <= 0 then
    0
  else n + sum (n-1)

lemma sum_psd n =
  (sum n) [@trigger] >= 0 
[@@by auto] [@@fc]

lemma sum_bound n =
  (sum n) [@trigger] >= n 
[@@by auto] [@@fc]

let rec sum_inverse m x =
  if x <= 0 then
    0
  else if (m >= sum x) then
    x
  else sum_inverse m (x-1)

lemma sum_inv_is_inv_of_sum_helper y p =
  (sum y) < sum (p+1) && p <= y
    ==>
    ((y = p) = true)
[@@by induct ~on_fun:[%id sum] ()]
[@@rw]

lemma sum_inv_is_inv_sum i y p =
  i >= 0 && y >= 0 && p >= 0 &&
  p <= y && i <= p
    ==>
  sum_inverse (i + sum p) y = p
[@@by auto]

lemma sum_inv_sum_corollary i p =
  i >= 0 && p >= 0 && i <= p
    ==>
    sum_inverse (i + sum p) (i + sum p) = p
[@@by 
     [%use sum_inv_is_inv_sum i (i + sum p) p]
     @> auto]
[@@rw]

(* In Imandra Core, we don't need these helper lemmas! Why now? *)

lemma helper n y x =
  y >= n
  ==>
  y <= 0
  || n >= y + sum x
  || (sum (sum_inverse n x)) <= n
  || y >= 1 + n
[@@by auto]

lemma helper_2 n u = 
  sum (sum_inverse n (-1 + u)) <= n
  ==>
  sum (sum_inverse n u) <= n
[@@by auto] [@@fc]

lemma sum_sum_inv_bound_1 n y =
  n >= 0 && y >= 0 && y >= n
    ==>
  (sum ((sum_inverse n y))) [@trigger] <= n
[@@by [%use helper n y (y-1)] @> auto]
[@@fc] [@@rw]

lemma sum_sum_inv_bound_2 n y =
  n >= 0 && y >= 0 && sum y >= n
    ==>
 (sum ((sum_inverse n y))) >= (n - sum_inverse n y)
[@@by auto]

let cantor_pair (a,b) =
    b + sum (a+b)

let cantor_pair_inverse n =
    if n = 0 then (0,0)
    else
      let j = n - sum (sum_inverse n n) in
      let i = (sum_inverse n n) - j in
      (i, j)
      
(* Main theorem I: Cantor pairing is a surjection from N x N -> N *)

theorem cantor_pair_onto n =
  let (a, b) = cantor_pair_inverse n in
  n >= 0
    ==>
  a >= 0 && b >= 0 && cantor_pair (a, b) = n
[@@by [%use sum_sum_inv_bound_2 n n]
       @> auto]

lemma cantor_pair_is_inverse a b =
   a >= 0 && b >= 0
     ==>
   cantor_pair_inverse (cantor_pair (a,b)) = (a,b)
[@@by auto]
     
theorem cantor_pair_one_one a b a' b' =
  a >= 0 && b >= 0 && a' >= 0 && b' >= 0
  && cantor_pair (a,b) = cantor_pair (a',b')
    ==>
  a = a' && b = b'
[@@by [%use cantor_pair_is_inverse a b]
  @>  [%use cantor_pair_is_inverse a' b']
  @> auto]
[@@disable cantor_pair]

(* Main theorem III: All together now (!), and notice that the above injectivity
   results are derivable directly in the arrow-theoretic setting (i.e., we could
   skip the application of `cantor_pair_is_inverse` if we wanted, and derive it
   on demand)! *)

module Bijection = struct

  let surj f g dom codom y =
    codom y ==> f (g y) = y && dom (g y)
  
  let inj f g dom codom x =
    dom x ==> g (f x) = x && codom (f x)
  
  let top (f : 'a -> 'b)
          (g : 'b -> 'a)
          (dom : 'a -> bool)
          (codom : 'b -> bool)
          (x : 'a)
          (y : 'b)
    =
    surj f g dom codom y
    && inj f g dom codom x
  
end

theorem final (n : int) (p : int * int) =
   Bijection.top
     cantor_pair
     cantor_pair_inverse
     (fun (a,b) -> a >= 0 && b >= 0)
     (fun n -> n >= 0)
     p
     n
[@@by [%use cantor_pair_onto n]
   @> [%use cantor_pair_is_inverse (fst p) (snd p)]
   @> auto]